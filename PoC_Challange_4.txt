Automatizziamo l'installazione e la configurazione di wp

Strumenti che useremo:

-Docker
-WP-CLI : un'interfaccia a riga di comando per WordPress.
-Makefile per automatizzare le direttive.

Contenitori:

PHP, MySQL, stack Nginx 

PoC:

1.Creaiamo il file docker-compose.yml alla radice del tuo progetto e definisci 3 contenitori separati (uno per PHP, uno per MySQL, uno per Nginx) come segue: 

version: '3'
services:
  wordpress:
    image: wordpress:5.2-php7.3-fpm-alpine
    depends_on:
      - wordpress_database
    volumes:
      - wordpress_data:/var/www/html

  wordpress_database:
    image: mysql:5.7
    restart: always
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: my_root_password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: my_wordpress_password

  wordpress_webserver:
    image: nginx:1.14-alpine
    depends_on:
      - wordpress
    volumes:
      - ./docker/wordpress/nginx/app.conf:/etc/nginx/conf.d/default.conf:ro
      - wordpress_data:/var/www/html
    ports:
      - 80:80

volumes:
  db_data: {}
  wordpress_data: {}



2.Configuriamo Nginx in docker/wordpress/nginx/app.conf come segue:

upstream php {
  server wordpress_php:9000;
}

server {
    root /var/www/html;
    index index.php;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        include fastcgi.conf;
        fastcgi_intercept_errors on;
        fastcgi_pass php;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }
}


3.Creiamo prima un contenitore Docker che conterr√† strumenti per automatizzare le cose. 

services:
  # ...

  wordpress_toolbox:
    build: ./docker/wordpress/toolbox/
    volumes:
      - ./wordpress:/var/www/wordpress
    working_dir: /var/www/wordpress
    depends_on:
      - wordpress_database
    environment:
      WORDPRESS_LOCALE: fr_FR
      WORDPRESS_DB_HOST: wordpress_database
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: my_wordpress_password
      WORDPRESS_WEBSITE_TITLE: 'My blog'
      WORDPRESS_WEBSITE_URL: 'http://localhost'
      WORDPRESS_WEBSITE_URL_WITHOUT_HTTP: 'localhost'
      WORDPRESS_WEBSITE_POST_URL_STRUCTURE: '/%year%/%monthnum%/%day%/%postname%/'
      WORDPRESS_ADMIN_USER: 'admin_user'
      WORDPRESS_ADMIN_PASSWORD: 'admin_password'
      WORDPRESS_ADMIN_EMAIL: 'test@example.com'


Nota:
Definiamo molte variabili d'ambiente qui che verranno utilizzate nei prossimi script. Questo √® davvero utile in quanto √® possibile modificare i valori delle variabili a seconda dell'ambiente del progetto. 

Una volta modificato il file "docker-compose.yml" dovrebbe assomigliare a questo:

version: '3'
services:
  wordpress:
    image: wordpress:5.2-php7.3-fpm-alpine
    depends_on:
      - wordpress_database
    volumes:
      - wordpress_data:/var/www/html

  wordpress_database:
    image: mysql:5.7
    restart: always
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: my_root_password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: my_wordpress_password

  wordpress_webserver:
    image: nginx:1.14-alpine
    depends_on:
      - wordpress
    volumes:
      - ./docker/wordpress/nginx/app.conf:/etc/nginx/conf.d/default.conf:ro
      - wordpress_data:/var/www/html
    ports:
      - 80:80

  wordpress_toolbox:
    build: ./docker/wordpress/toolbox/
    volumes:
      - wordpress_data:/wordpress
    working_dir: /wordpress
    depends_on:
      - wordpress_database
    environment:
      WORDPRESS_LOCALE: en_US
      WORDPRESS_DB_HOST: wordpress_database
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: my_wordpress_password
      WORDPRESS_WEBSITE_TITLE: "My blog"
      # WORDPRESS_WEBSITE_URL: "http://example.com"
      # WORDPRESS_WEBSITE_URL_WITHOUT_HTTP: "example.com"
      WORDPRESS_WEBSITE_URL: "http://localhost"
      WORDPRESS_WEBSITE_URL_WITHOUT_HTTP: "localhost"
      WORDPRESS_WEBSITE_POST_URL_STRUCTURE: "/%year%/%monthnum%/%day%/%postname%/"
      WORDPRESS_ADMIN_USER: "admin_user"
      WORDPRESS_ADMIN_PASSWORD: "admin_password"
      WORDPRESS_ADMIN_EMAIL: "test@example.com"

volumes:
  db_data: {}
  wordpress_data: {}


4.Creiamo il file Dockerfile in docker/wordpress/toolbox come segue:


FROM php:7.3-cli-alpine

RUN apk add --no-cache curl
RUN apk add --no-cache make

# Install WP-CLI in the toolbox
RUN curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
RUN chmod +x wp-cli.phar
RUN mv wp-cli.phar /usr/local/bin/wp-cli

# Install MySQL extension, as WP-CLI needs to access to WordPress database
RUN docker-php-ext-install mysqli

# Add Makefile to scripts dir
ADD Makefile /scripts/Makefile

ENTRYPOINT [ &quot;make&quot;, &quot;-f&quot;, &quot;/scripts/Makefile&quot; ]


Nota:
Questo Dockerfile √® basato su PHP, installa l'utilit√† WP-CLI e ha un file chiamato Makefile come punto di ingresso. Ora abbiamo un WP-CLI funzionante che consente di manipolare WordPress dalla riga di comando. Il prossimo passo sar√† effettuare l'installazione di WordPress senza alcun clic, ma con script. 

5.Definiamo un nuovo file chiamato "Makefile" in docker/wordpress/toolbox come segue: 

WP_CLI=wp-cli --allow-root

install: configure

configure:
	@echo &quot;‚öôÔ∏è Configuring Wordpress database...&quot;
	@rm -f wp-config.php
	$(WP_CLI) core config \
		--dbhost=${WORDPRESS_DB_HOST} \
		--dbname=${WORDPRESS_DB_NAME} \
		--dbuser=${WORDPRESS_DB_USER} \
		--dbpass=${WORDPRESS_DB_PASSWORD} \
		--locale=${WORDPRESS_LOCALE} \
		--skip-check

	@echo &quot;‚öôÔ∏è Configuring Wordpress parameters...&quot;
	$(WP_CLI) core install \
		--url=${WORDPRESS_WEBSITE_URL_WITHOUT_HTTP} \
		--title=&quot;$(WORDPRESS_WEBSITE_TITLE)&quot; \
		--admin_user=${WORDPRESS_ADMIN_USER} \
		--admin_password=${WORDPRESS_ADMIN_PASSWORD} \
		--admin_email=${WORDPRESS_ADMIN_EMAIL}

	$(WP_CLI) option update siteurl &quot;${WORDPRESS_WEBSITE_URL}&quot;
	$(WP_CLI) rewrite structure $(WORDPRESS_WEBSITE_POST_URL_STRUCTURE)



Nota:
Ho definito una costante WP_CLI all'inizio del file, che semplifica la chiamata di wp-cli in ogni attivit√† ed aggiunge automaticamente l'opzione --allow-root al comando. Questa opzione √® necessaria poich√© il comando viene eseguito in un ambiente Docker. 


6.Aggiungiamo un altro file chiamato "Makefile" alla radice del progetto come segue: 


WORDPRESS_TOOLBOX=docker-compose run --rm wordpress_toolbox

start:
	docker-compose up -d --build

stop:
	docker-compose stop

wordpress_install: start
	$(WORDPRESS_TOOLBOX) install

wordpress_configure:
	$(WORDPRESS_TOOLBOX) configure

clean: stop
	@echo &quot;üí• Removing Wordpress...&quot;
	@rm -rf wordpress
	@echo &quot;üí• Removing Docker containers...&quot;
	docker-compose rm -f



7.Ora siamo pronti per il lancio!

Eseguiamo questi comandi dalla radice del progetto:

make wordpress_install

make wordpress_configure

Visitiamo l'url del nostro wp andando su http://localhost:8080/wp-admin


Nota: 
Attualmente sono installati i seguenti plugin di sicurezza:

-Akismet Anti-Spam
-Clear Sucuri Cache
-Login LockDown
-Protect WP-Admin

Un sito wordpress non pu√≤ essere completamente sicuro in quanto √® risaputo che i suoi plugin possono fare la differenza, motivo per cui le continue uscite di zero-day sono molto comuni per questo CMS.

Architettura finale:
.
‚îú‚îÄ‚îÄ docker
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ wordpress
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ nginx
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ app.conf
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ toolbox
‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ Makefile
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ Makefile
‚îú‚îÄ‚îÄ PoC_Challange_4.txt
‚îî‚îÄ‚îÄ README.md
